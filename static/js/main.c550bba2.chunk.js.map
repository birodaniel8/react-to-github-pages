{"version":3,"sources":["actions/types.js","reducers/card.js","reducers/data.js","reducers/index.js","store.js","actions/card.js","components/cards/CardItem.js","components/cards/Character.js","components/cards/Planet.js","components/cards/Movie.js","components/cards/Species.js","components/cards/Spaceship.js","components/cards/Vehicle.js","components/CardSelector.js","components/App.js","actions/data.js","components/Root.js","index.js"],"names":["SET_CARD","LOAD_DATA","initialState","selectedCard","type","name","propertyCard","data","movies","characters","planets","species","spaceships","vehicles","combineReducers","card","state","action","payload","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","setCard","cardType","dispatch","getByURL","itemList","url","fieldName","filter","item","CardItem","property","propertyName","setCardType","charAt","toUpperCase","slice","replace","Grid","container","spacing","xs","align","Array","isArray","length","Button","variant","onClick","map","i","splittetProperty","split","sp","renderButton","defaultProps","connect","character","Paper","planet","movie","title","console","log","spaceship","vehicle","loadData","useState","allLoaded","setAllLoaded","useEffect","fetch","process","then","response","json","Object","entries","entry","every","className","LinearProgress","value","color","disabled","Math","floor","random","Container","maxWidth","style","border","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c550bba2.chunk.js","sourcesContent":["export const SET_CARD = \"SET_CARD\";\r\nexport const LOAD_DATA = \"LOAD_DATA\";","/* eslint-disable import/no-anonymous-default-export */\r\nimport { SET_CARD } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  selectedCard: {\r\n    type: null,\r\n    name: null,\r\n    propertyCard: false,\r\n  },\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CARD:\r\n      return {\r\n        ...state,\r\n        selectedCard: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { LOAD_DATA } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  data: {\r\n    movies: [],\r\n    characters: [],\r\n    planets: [],\r\n    species: [],\r\n    spaceships: [],\r\n    vehicles: [],\r\n  },\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOAD_DATA:\r\n      return {\r\n        ...state,\r\n        data: { ...state.data, ...action.payload },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport card from \"./card\"\r\nimport data from \"./data\"\r\n\r\nexport default combineReducers({\r\n  card,\r\n  data,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)),\r\n);\r\n\r\nexport default store;","import { SET_CARD } from \"../actions/types.js\";\r\n\r\n// Set card:\r\nexport const setCard = (cardType, name, propertyCard = false) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CARD,\r\n    payload: {\r\n      type: cardType,\r\n      name: name,\r\n      propertyCard: propertyCard,\r\n    },\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\n\r\nimport { setCard } from \"../../actions/card\";\r\n\r\nconst getByURL = (itemList, url, fieldName = \"name\") => {\r\n  return itemList.filter((item) => item.url === url)[0][fieldName];\r\n};\r\n\r\nconst CardItem = ({ setCard, item, property, propertyName, itemList, fieldName, setCardType }) => {\r\n  if (!propertyName) {\r\n    propertyName = property.charAt(0).toUpperCase() + property.slice(1);\r\n  }\r\n  propertyName = propertyName.replace(/_/g, \" \");\r\n\r\n  const renderButton = () => {\r\n    if (item[property] !== \"unknown\" && item[property] !== \"n/a\") {\r\n      if (itemList) {\r\n        if (Array.isArray(item[property])) {\r\n          // if the property is an empty array for species property then set it to Human:\r\n          if (property === \"species\" && item[property].length === 0) {\r\n            return (\r\n              <Button variant=\"contained\" onClick={() => setCard(setCardType, \"Human\")}>\r\n                Human\r\n              </Button>\r\n            );\r\n          }\r\n          // if the property is an array of urls (eg. list of movie urls):\r\n          return item[property].map((i) => {\r\n            const name = getByURL(itemList, i, fieldName);\r\n            return (\r\n              <Button variant=\"contained\" onClick={() => setCard(setCardType, name)}>\r\n                {name}\r\n              </Button>\r\n            );\r\n          });\r\n        }\r\n        // if the property is a single url:\r\n        const name = getByURL(itemList, item[property], fieldName);\r\n        return (\r\n          <Button variant=\"contained\" onClick={() => setCard(setCardType, name)}>\r\n            {name}\r\n          </Button>\r\n        );\r\n      }\r\n      // if the property is a string with a list of comma separated characteristics:\r\n      const splittetProperty = item[property].split(\", \");\r\n      if (splittetProperty.length > 1) {\r\n        return splittetProperty.map((sp) => <Button variant=\"contained\">{sp}</Button>);\r\n      }\r\n\r\n      // if the property is a single value:\r\n      return <Button variant=\"contained\">{item[property]}</Button>;\r\n    }\r\n    return <div></div>;\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={5} align=\"right\">\r\n        <b>{propertyName}:</b>\r\n      </Grid>\r\n      <Grid item xs={7} align=\"left\">\r\n        {renderButton()}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nCardItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  property: PropTypes.string.isRequired,\r\n  propertyName: PropTypes.string,\r\n  itemList: PropTypes.array,\r\n  fieldName: PropTypes.string,\r\n  setCardType: PropTypes.string,\r\n};\r\n\r\nCardItem.defaultProps = {\r\n  propertyName: null,\r\n  itemList: null,\r\n  fieldName: \"name\",\r\n  setCardType: null,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard })(CardItem);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Character = ({ name, data }) => {\r\n  const character = data.characters.filter((character) => character.name === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{character.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={character} property=\"homeworld\" itemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={character} property=\"species\" itemList={data.species} setCardType=\"species\" />\r\n        <CardItem\r\n          item={character}\r\n          property=\"films\"\r\n          propertyName=\"movies\"\r\n          itemList={data.movies}\r\n          setCardType=\"movie\"\r\n          fieldName=\"title\"\r\n        />\r\n        <CardItem item={character} property=\"gender\" />\r\n        <CardItem item={character} property=\"skin_color\" />\r\n        <CardItem item={character} property=\"birth_year\" />\r\n        <CardItem item={character} property=\"eye_color\" />\r\n        <CardItem item={character} property=\"hair_color\" />\r\n        <CardItem item={character} property=\"height\" />\r\n        <CardItem item={character} property=\"mass\" />\r\n        <CardItem\r\n          item={character}\r\n          property=\"starships\"\r\n          propertyName=\"Spaceships\"\r\n          itemList={data.spaceships}\r\n          setCardType=\"spaceship\"\r\n        />\r\n        <CardItem item={character} property=\"vehicles\" itemList={data.vehicles} setCardType=\"vehicle\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nCharacter.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Character);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Planet = ({ name, data }) => {\r\n  const planet = data.planets.filter((planet) => planet.name === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{planet.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={planet} property=\"climate\" />\r\n        <CardItem item={planet} property=\"diameter\" />\r\n        <CardItem item={planet} property=\"gravity\" />\r\n        <CardItem item={planet} property=\"rotation_period\" />\r\n        <CardItem item={planet} property=\"orbital_period\" />\r\n        <CardItem item={planet} property=\"population\" />\r\n        <CardItem item={planet} property=\"terrain\" />\r\n        <CardItem\r\n          item={planet}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          itemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={planet} property=\"residents\" itemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nPlanet.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Planet);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Movie = ({ name, data }) => {\r\n  const movie = data.movies.filter((movie) => movie.title === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{movie.title}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={movie} property=\"director\" />\r\n        <CardItem item={movie} property=\"producer\" />\r\n        <CardItem item={movie} property=\"release_date\" />\r\n        <CardItem item={movie} property=\"characters\" itemList={data.characters} setCardType=\"character\" />\r\n        <CardItem item={movie} property=\"planets\" itemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={movie} property=\"species\" itemList={data.species} setCardType=\"species\" />\r\n        <CardItem\r\n          item={movie}\r\n          property=\"starships\"\r\n          propertyName=\"Spaceships\"\r\n          itemList={data.spaceships}\r\n          setCardType=\"spaceship\"\r\n        />\r\n        <CardItem item={movie} property=\"vehicles\" itemList={data.vehicles} setCardType=\"vehicle\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nMovie.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Movie);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Species = ({ name, data }) => {\r\n  const species = data.species.filter((species) => species.name === name)[0];\r\n  console.log(species);\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{species.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={species} property=\"homeworld\" itemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={species} property=\"classification\" />\r\n        <CardItem item={species} property=\"designation\" />\r\n        <CardItem item={species} property=\"language\" />\r\n        <CardItem item={species} property=\"average_lifespan\" />\r\n        <CardItem item={species} property=\"average_height\" />\r\n        <CardItem item={species} property=\"skin_colors\" />\r\n        <CardItem item={species} property=\"hair_colors\" />\r\n        <CardItem item={species} property=\"eye_colors\" />\r\n        <CardItem\r\n          item={species}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          itemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={species} property=\"people\" itemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nSpecies.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Species);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Spaceship = ({ name, data }) => {\r\n  const spaceship = data.spaceships.filter((spaceship) => spaceship.name === name)[0];\r\n  console.log(spaceship)\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{spaceship.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={spaceship} property=\"model\" />\r\n        <CardItem item={spaceship} property=\"manufacturer\" />\r\n        <CardItem item={spaceship} property=\"cost_in_credits\" />\r\n        <CardItem item={spaceship} property=\"crew\" />\r\n        <CardItem item={spaceship} property=\"length\" />\r\n        <CardItem item={spaceship} property=\"max_atmosphering_speed\" />\r\n        <CardItem item={spaceship} property=\"hyperdrive_rating\" />\r\n        <CardItem\r\n          item={spaceship}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          itemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={spaceship} property=\"pilots\" itemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nSpaceship.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Spaceship);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Vehicle = ({ name, data }) => {\r\n  const vehicle = data.vehicles.filter((vehicle) => vehicle.name === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{vehicle.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={vehicle} property=\"model\" />\r\n        <CardItem item={vehicle} property=\"manufacturer\" />\r\n        <CardItem item={vehicle} property=\"cost_in_credits\" />\r\n        <CardItem item={vehicle} property=\"crew\" />\r\n        <CardItem item={vehicle} property=\"length\" />\r\n        <CardItem item={vehicle} property=\"max_atmosphering_speed\" />\r\n        <CardItem\r\n          item={vehicle}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          itemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={vehicle} property=\"pilots\" itemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nVehicle.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Vehicle);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport Character from \"./cards/Character\";\r\nimport Planet from \"./cards/Planet\";\r\nimport Movie from \"./cards/Movie\";\r\nimport Species from \"./cards/Species\";\r\nimport Spaceship from \"./cards/Spaceship\";\r\nimport Vehicle from \"./cards/Vehicle\";\r\n\r\nconst CardSelector = ({ selectedCard, data }) => {\r\n  if (!selectedCard.propertyCard) {\r\n    switch (selectedCard.type) {\r\n      case \"character\":\r\n        return <Character name={selectedCard.name} />;\r\n      case \"planet\":\r\n        return <Planet name={selectedCard.name} />;\r\n      case \"movie\":\r\n        return <Movie name={selectedCard.name} />;\r\n      case \"species\":\r\n        return <Species name={selectedCard.name} />;\r\n      case \"spaceship\":\r\n        return <Spaceship name={selectedCard.name} />;\r\n      case \"vehicle\":\r\n        return <Vehicle name={selectedCard.name} />;\r\n      default:\r\n        return <div>Nothing has been selected</div>;\r\n    }\r\n  } else {\r\n    return <div>This is a property card</div>;\r\n  }\r\n};\r\n\r\n// PropTypes:\r\nCardSelector.propTypes = {\r\n  selectedCard: PropTypes.object.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  selectedCard: state.card.selectedCard,\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CardSelector);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { LinearProgress, Button, Container, Grid } from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport CardSelector from \"./CardSelector\";\r\n\r\nimport { setCard } from \"../actions/card\";\r\nimport { loadData } from \"../actions/data\";\r\n\r\nconst App = ({ data, selectedCard, setCard, loadData }) => {\r\n  const [allLoaded, setAllLoaded] = useState(false);\r\n\r\n  const loadAllData = () => {\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/films.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ movies: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/people.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ characters: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/planets.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ planets: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/species.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ species: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/starships.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ spaceships: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/vehicles.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ vehicles: response[\"items\"] });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadAllData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setAllLoaded(\r\n      Object.entries(data)\r\n        .map((entry) => entry[1].length)\r\n        .every((item) => item > 0)\r\n    );\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <LinearProgress variant=\"determinate\" value={allLoaded === true ? 100 : 0} />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        disabled={!allLoaded}\r\n        onClick={() => setCard(\"character\", data.characters[Math.floor(Math.random() * 82)].name)}\r\n      >\r\n        Random character\r\n      </Button>\r\n\r\n      <Container maxWidth=\"xs\" style={{ border: \"1px solid black\" }}>\r\n        <CardSelector />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nApp.propTypes = {\r\n  selectedCard: PropTypes.object.isRequired,\r\n  setCard: PropTypes.func.isRequired,\r\n  loadData: PropTypes.func.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  selectedCard: state.card.selectedCard,\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard, loadData })(App);\r\n","import { LOAD_DATA } from \"../actions/types.js\";\r\n\r\n// async function loadMovies(data) {\r\n//   fetch(`${process.env.PUBLIC_URL}/sw_api_data/films.json`)\r\n//     .then((response) => response.json())\r\n//     .then((response) => {\r\n//       return { ...data, movies: response[\"items\"] };\r\n//     });\r\n// }\r\n\r\n// Set Data:\r\nexport const loadData = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: LOAD_DATA,\r\n    payload: data,\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\"; // wrap this around everything for redux\r\nimport store from \"../store\";\r\nimport App from \"./App\";\r\n\r\nconst Root = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div>\r\n        <App />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Root from './components/Root';\r\n\r\nReactDOM.render(\r\n    <Root />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}