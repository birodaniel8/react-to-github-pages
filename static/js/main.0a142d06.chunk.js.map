{"version":3,"sources":["actions/types.js","reducers/card.js","reducers/index.js","store.js","components/cards/GetFunctions.js","components/cards/Character.js","components/App.js","actions/card.js","components/Root.js","index.js"],"names":["SET_CARD","initialState","selectedCard","type","id","combineReducers","card","state","action","payload","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","getMovie","url","data","movies","filter","movie","title","getPlanet","planets","planet","name","getSpecies","species","Character","selected","c","characters","Object","entries","map","entry","length","every","item","Button","variant","homeworld","films","gender","skin_color","connect","setCard","cardType","selectedId","dispatch","useState","spaceships","vehicles","setData","allLoaded","setAllLoaded","characterId","useEffect","fetch","process","then","response","json","className","LinearProgress","value","color","disabled","onClick","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a142d06.chunk.js","sourcesContent":["export const SET_CARD = \"SET_CARD\";","/* eslint-disable import/no-anonymous-default-export */\r\nimport { SET_CARD } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  selectedCard: {\r\n    type: null,\r\n    id: null,\r\n  },\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CARD:\r\n      return {\r\n        ...state,\r\n        selectedCard: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport card from \"./card\"\r\n\r\nexport default combineReducers({\r\n  card,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)),\r\n);\r\n\r\nexport default store;","export const getMovie = (url, data) => {\r\n  return data.movies.filter((movie) => movie.url === url)[0].title;\r\n};\r\n\r\nexport const getCharacter = (url, data) => {\r\n  return data.characters.filter((character) => character.url === url)[0].name;\r\n};\r\n\r\nexport const getPlanet = (url, data) => {\r\n  return data.planets.filter((planet) => planet.url === url)[0].name;\r\n};\r\n\r\nexport const getSpecies = (url, data) => {\r\n  if (url) {\r\n    return data.species.filter((species) => species.url === url)[0].name;\r\n  } else {\r\n    return \"Human\"\r\n  }\r\n};\r\n\r\nexport const getSpaceship = (url, data) => {\r\n  return data.spaceships.filter((spaceship) => spaceship.url === url)[0].name;\r\n};\r\n\r\nexport const getVehicle = (url, data) => {\r\n  return data.vehicles.filter((vehicle) => vehicle.url === url)[0].name;\r\n};\r\n","import React from \"react\";\r\nimport { getPlanet, getSpecies, getMovie } from \"./GetFunctions\"\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\nconst Character = ({ selected, data }) => {\r\n  const c = data.characters[selected];\r\n  // console.log(c);\r\n\r\n\r\n  if (Object.entries(data)\r\n  .map((entry) => entry[1].length)\r\n  .every((item) => item > 0)) {\r\n    return (\r\n      <div>\r\n        <h1>{c.name}</h1>\r\n        <p>\r\n          <b>Homeworld:</b> <Button variant=\"contained\">{getPlanet(c.homeworld, data)}</Button>\r\n        </p>\r\n        <p>\r\n          <b>Species:</b> <Button variant=\"contained\">{getSpecies(c.species[0], data)}</Button>\r\n        </p>\r\n        <p>\r\n          <b>Movies:</b> {c.films.map(movie => <Button variant=\"contained\">{getMovie(movie, data)}</Button>)}\r\n        </p>\r\n        <p>\r\n          <b>Gender:</b> {c.gender}\r\n        </p>\r\n        <p>\r\n          <b>Skin color:</b> {c.skin_color}\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n};\r\n\r\nexport default Character;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { LinearProgress, Button } from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport Character from \"./cards/Character\";\r\n\r\nimport { setCard } from \"../actions/card\";\r\n\r\nconst App = ({ selectedCard, setCard }) => {\r\n  const [data, setData] = useState({\r\n    movies: [],\r\n    characters: [],\r\n    planets: [],\r\n    species: [],\r\n    spaceships: [],\r\n    vehicles: [],\r\n  });\r\n  const [allLoaded, setAllLoaded] = useState(false);\r\n  const [cardType, setCardType] = useState(<div/>)\r\n  const [characterId, setCharacterId] = useState(0);\r\n\r\n  const loadData = () => {\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/films.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setData((data) => ({ ...data, movies: response[\"items\"] }));\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/people.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setData((data) => ({ ...data, characters: response[\"items\"] }));\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/planets.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setData((data) => ({ ...data, planets: response[\"items\"] }));\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/species.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setData((data) => ({ ...data, species: response[\"items\"] }));\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/starships.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setData((data) => ({ ...data, spaceships: response[\"items\"] }));\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/vehicles.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setData((data) => ({ ...data, vehicles: response[\"items\"] }));\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setAllLoaded(\r\n      Object.entries(data)\r\n        .map((entry) => entry[1].length)\r\n        .every((item) => item > 0)\r\n    );\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <LinearProgress\r\n        variant=\"determinate\"\r\n        value={allLoaded === true ? 100 : 0}\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        disabled={!allLoaded}\r\n        // onClick={() => setCharacterId(Math.floor(Math.random() * 82))}\r\n        onClick={() => setCard(\"asdf\", 5)}\r\n      >\r\n        Random character\r\n      </Button>\r\n\r\n      <Character selected={characterId} data={data} />\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nApp.propTypes = {\r\n  selectedCard: PropTypes.object.isRequired,\r\n  setCard: PropTypes.func.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  selectedCard: state.card.selectedCard,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard })(App);\r\n","import { SET_CARD } from \"../actions/types.js\";\r\n\r\n// Set card:\r\nexport const setCard = (cardType, selectedId) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CARD,\r\n    payload: {\r\n      type: cardType,\r\n      id: selectedId,\r\n    }\r\n  })\r\n}","import React from \"react\";\r\nimport { Provider } from \"react-redux\"; // wrap this around everything for redux\r\nimport store from \"../store\";\r\nimport App from \"./App\";\r\n\r\nconst Root = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div>\r\n        <App />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Root from './components/Root';\r\n\r\nReactDOM.render(\r\n    <Root />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}